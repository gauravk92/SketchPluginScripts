var NSUTF8StringEncoding = 4;
var NSPNGFileType = 4;
var NSImageCompressionFactor = "NSImageCompressionFactor";

//
//var INPUT_PATH = "/Users/gkhanna/Google Drive/Google/EndorTemplate2/projects/taptargets/scripts/sketch.json";
//var INPUT_DATA = [NSString stringWithContentsOfFile:INPUT_PATH encoding:NSUTF8StringEncoding error:0];

var TMPDIR = [[NSProcessInfo processInfo] environment]['TMPDIR'];
var SKETCHLOG = TMPDIR + "sketch.log";

var MODIFY_LAYER_NAME = 0;

var initX = 0;
var initY = 0;
var pages = context.document.pages();
var doc_name = context.document.displayName();

print('starting');

for (var i = 0;i<pages.length();i++) {
    var contents = pages[i].children();
    //print(contents);
    for (var x = 0;x<contents.length();x++) {
        var layer = contents[x];
        //var INPUT = JSON.parse(JSON.parse(INPUT_DATA));

        //log(contents);

        //print(INPUT);

        if (layer.description().indexOf("MSBitmapLayer") > -1) {

            //log(layer.image().imageData);

            //break;


            var imageData = layer.image().data();

            //dump(layer.frameGeneric());

            var imageSize = layer.frameGeneric().size();
            var imageRect = NSMakeRect(0, 0, imageSize.width, imageSize.height);
            log(layer.frameGeneric().size());

		    //dump(layer.image().data());

            //dump(imageData);

            //break;

            log(layer.name());

            //dump(contents[0].image().image());

            //var img = .image().image();
            //var imageData = [image TIFFRepresentation];
            //var imageRep = [NSBitmapImageRep imageRepWithData:imageData];
            var newImage = [[NSImage alloc] initWithData:imageData];
            var newSize = imageRect.size;
            log("reach");
            var newImageRep = [newImage bestRepresentationForRect:imageRect context:0 hints:0];


            var sizedImage = [[NSImage alloc] initWithSize:newSize];

            [sizedImage lockFocus];
            [newImageRep drawInRect:imageRect];
            [sizedImage unlockFocus];

            var newImageSizedData = [sizedImage TIFFRepresentation];
            var newImageSizedRep = [NSBitmapImageRep imageRepWithData:newImageSizedData];
            log("reached");
            //dump(newImageSizedRep);
            var imageProps = [NSDictionary dictionaryWithObject:[NSNumber numberWithFloat:1.0] forKey:NSImageCompressionFactor];
            var pngImageData = [newImageSizedRep representationUsingType:NSPNGFileType properties:imageProps];
            var fm = [NSFileManager defaultManager];
            var folderName = [[[NSString alloc] initWithString:doc_name] stringByDeletingPathExtension];
            var folderPath = [[[[NSString alloc] initWithString:"~/Desktop/"] stringByAppendingPathComponent:folderName] stringByExpandingTildeInPath];
            if (![fm fileExistsAtPath:folderPath]) {
                [fm createDirectoryAtPath:folderPath withIntermediateDirectories:0 attributes:[NSDictionary new]
                        error:0];
            }
            var imageName = [[[[[NSString alloc] initWithString:layer.name()] stringByReplacingOccurrencesOfString:" " withString:"-"]
             stringByReplacingOccurrencesOfString:"." withString:@"-"] stringByAppendingString:".png"];
            var imagePath = [folderPath stringByAppendingPathComponent:imageName];
            [pngImageData writeToFile:imagePath atomically:0];

        }

    }
}

//for (var x = 0;x<pages.length();x++) {
//    var children = pages[x].children();
//    for (var i = 0;i<children.length();i++) {
//        var layer = children[i];
//        //log(layer);
//        //dump(layer);
//        if (layer.description().indexOf("MSBitmapLayer") > -1) {
//        log(layer.name());
//        }
//    //	if (layer.description().indexOf("MSShapeGroup") > -1 && INPUT.hasOwnProperty(layer.name())) {
//    //		layer.style().fills().removeStylePartAtIndex(0);
//    //		var fill = layer.style().fills().addNewStylePart();
//    //		fill.color = MSColor.colorWithSVGString("#" + INPUT[layer.name()]['color']);
//    //        if (MODIFY_LAYER_NAME) {
//    //            var val = parseInt(INPUT[layer.name()]['value'] * 100);
//    //            layer.name = layer.name() + '-' + val + '%';
//    //        }
//    //	}
//    }
//}

print('completed successfully');


function jsonObjectToString(obj) {
    var data = [NSJSONSerialization dataWithJSONObject:obj options:0 error:0];
    return [[NSString alloc] initWithData:data encoding:NSUTF8StringEncoding];
}

function copyObjectJSONToClipboard(obj) {

    var outputString = jsonObjectToString(obj);

    var pasteBoard = NSPasteboard.generalPasteboard()

    // first you must clear the contents of the clipboard in order to write to it.
    pasteBoard.clearContents()
    // now read write our String and an Array with 1 item at index 0
    pasteBoard.writeObjects([outputString])
}

function print(x) {
    var fh = [NSFileHandle fileHandleForWritingAtPath:SKETCHLOG];
    if (!fh) {
        [[NSFileManager defaultManager] createFileAtPath:SKETCHLOG contents:[NSData data] attributes:[NSDictionary dictionary]];
        fh = [NSFileHandle fileHandleForWritingAtPath:SKETCHLOG];
    }
    if (!fh) {
        throw "some major error getting file handle of " + SKETCHLOG;
    }

    [fh seekToEndOfFile];
    var strData = null;
    if (x.hasOwnProperty('debugDescription')) {
        strData = [[[NSString alloc] initWithString:x.debugDescription()] dataUsingEncoding:NSUTF8StringEncoding];
    } else if (typeof x == 'string') {
        strData = [[[NSString alloc] initWithString:x] dataUsingEncoding:NSUTF8StringEncoding];
    } else {
        var str = jsonObjectToString(x);
        strData = [str dataUsingEncoding:NSUTF8StringEncoding];
    }
    [fh writeData:strData];
    var newLineData = [[[NSString alloc] initWithString:"\n"] dataUsingEncoding:NSUTF8StringEncoding];
    [fh writeData:newLineData];
    [fh closeFile];
}


function dump(obj){
  log("#####################################################################################")
  log("## Dumping object " + obj )
  log("## obj class is: " + [obj className])
  log("#####################################################################################")
  log("obj.properties:")
  log("#####################################################################################")
  log([obj class].mocha().properties())
  log("obj.propertiesWithAncestors:")
  log([obj class].mocha().propertiesWithAncestors())
  log("#####################################################################################")
  log("obj.classMethods:")
  log("#####################################################################################")
  log([obj class].mocha().classMethods())
  log("obj.classMethodsWithAncestors:")
  log([obj class].mocha().classMethodsWithAncestors())
  log("#####################################################################################")
  log("obj.instanceMethods:")
  log("#####################################################################################")
  log([obj class].mocha().instanceMethods())
  log("obj.instanceMethodsWithAncestors:")
  log([obj class].mocha().instanceMethodsWithAncestors())
  log("#####################################################################################")
  log("obj.protocols:")
  log("#####################################################################################")
  log([obj class].mocha().protocols())
  log("obj.protocolsWithAncestors:")
  log([obj class].mocha().protocolsWithAncestors())
  log("#####################################################################################")
  log("obj.treeAsDictionary():")
  log("#####################################################################################")
  log(obj.treeAsDictionary())
}
